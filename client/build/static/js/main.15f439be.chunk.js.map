{"version":3,"sources":["components/Navbar/index.tsx","components/Card/index.tsx","utils/API.ts","pages/dadJokes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","minWidth","bullet","display","margin","transform","fontSize","pos","JokeCard","props","Card","CardContent","gutterBottom","component","joke","punchline","CardActions","size","jokesData","axios","get","useState","jokes","jokesState","setJokes","useEffect","API","then","res","console","log","data","map","catch","key","Math","random","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oUASMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,EACVC,aAAc,IAEhBC,WAAY,CACVC,YAAaN,EAAMO,QAAQ,IAE7BC,MAAO,CACLL,SAAU,QAyBDM,EApBA,WACb,IAAMC,EAAUZ,IAEhB,OACE,yBAAKa,UAAWD,EAAQR,MACtB,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQL,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,OAA5C,aAGA,kBAACa,EAAA,EAAD,CAAQJ,MAAM,WAAd,uB,2CC7BJnB,EAAYC,YAAW,CAC3BG,KAAM,CACJoB,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEblB,MAAO,CACLmB,SAAU,IAEZC,IAAK,CACHxB,aAAc,MA2BHyB,EAvBE,SAACC,GAChB,IAAMpB,EAAUZ,IAEhB,OACE,kBAACiC,EAAA,EAAD,CAAMpB,UAAWD,EAAQR,MACvB,kBAAC8B,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAYR,UAAWD,EAAQF,MAAOS,MAAM,gBAAgBgB,cAAY,GAAxE,YAGA,kBAACd,EAAA,EAAD,CAAYC,QAAQ,QAAQc,UAAU,KACnCJ,EAAMK,MAET,kBAAChB,EAAA,EAAD,CAAYC,QAAQ,QAAQc,UAAU,KACnCJ,EAAMM,YAGX,kBAACC,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CAAQiB,KAAK,SAAb,iB,iBCxCO,EACD,SAASC,GACf,OAAOC,IAAMC,IAAI,aAAcF,IC8DxBV,EA7DE,WAAO,IAAD,EAEYa,mBAAS,CACpCC,MAAO,CAAC,CACJR,KAAM,sCACNC,UAAW,+BALA,mBAEZQ,EAFY,KAEAC,EAFA,KAuCnB,OAJAC,qBAAU,WAzBNC,Q,GAAkBH,YACbI,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAIG,MAChBH,EAAIG,KAAKC,KAAK,SAACD,GACXP,EAAS,2BACFD,GADC,IAEJD,MAAO,CAAC,CACJR,KAAMiB,EAAKjB,KACXC,UAAWgB,EAAKhB,qBAK/BkB,OAAM,WACHJ,QAAQC,IAAI,wBACZN,EAAS,2BACFD,GADC,IAEJD,MAAO,CAAC,CACJR,KAAM,iBACNC,UAAW,cAW3B,6BACI,kBAAC,EAAD,CACID,KAAK,cACLC,UAAU,qBAEd,kBAAC,EAAD,CACID,KAAK,SAERS,EAAWD,MAAMU,KAAI,SAACD,EAAMG,GACzB,OACI,kBAAC,EAAD,CACIA,IAAKC,KAAKC,OACVtB,KAAMiB,EAAKjB,KACXC,UAAWgB,EAAKhB,iB,SCzCzBsB,MAXf,WACE,OACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,MACA,kBAACgD,EAAA,EAAD,KACE,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.15f439be.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginBottom: 10,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Dad Jokes\r\n          </Typography>\r\n          <Button color=\"inherit\">Submit New Joke</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nconst JokeCard = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Dad Joke\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.joke}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.punchline}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Learn More</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default JokeCard;","import axios from \"axios\";\r\n\r\nexport default {\r\n    getJokes: function(jokesData: any) {\r\n        return axios.get(\"/api/jokes\", jokesData)\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Card from '../components/Card'\r\n// import axios from 'axios';\r\nimport API from '../utils/API';\r\n\r\nconst JokeCard = () => {\r\n\r\n    const [jokesState, setJokes] = useState({\r\n        jokes: [{\r\n            joke: \"Why did the chicken cross the road?\",\r\n            punchline: \"To get to the other side\"\r\n        }]\r\n    })\r\n\r\n    const getJokes = () => {\r\n        API.getJokes(this.jokesState)\r\n            .then((res: any) => {\r\n                console.log(res.data)\r\n                res.data.map( (data: any) => {\r\n                    setJokes({\r\n                        ...jokesState,\r\n                        jokes: [{\r\n                            joke: data.joke,\r\n                            punchline: data.punchline\r\n                        }]\r\n                    })\r\n                })\r\n            })\r\n            .catch(() => {\r\n                console.log(\"Something went wrong\")\r\n                setJokes({\r\n                    ...jokesState,\r\n                    jokes: [{\r\n                        joke: \"Failed to load\",\r\n                        punchline: \"\"\r\n                    }]\r\n                })\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getJokes()\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                joke=\"Stupid joke\"\r\n                punchline=\"Stupid punchline\"\r\n            />\r\n            <Card\r\n                joke=\"Blah\"\r\n            />\r\n            {jokesState.jokes.map((data, key) => {\r\n                return (\r\n                    <Card\r\n                        key={Math.random}\r\n                        joke={data.joke}\r\n                        punchline={data.punchline}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeCard;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport JokesPage from './pages/dadJokes'\nimport { Container } from '@material-ui/core'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container>\n        <JokesPage />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}